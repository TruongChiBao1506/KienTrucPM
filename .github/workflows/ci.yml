name: Spring Boot Maven CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build with Maven
        run: |
          # Danh sách các microservices
          services=("eureka-server" "auth-service" "user-service" "product-service" "order-service" "cart-service" "review-service" "email-service" "notification-service" "chatbot-service" "api-gateway")
          
          for service in "${services[@]}"; do
            if [ -d "$service" ]; then
              echo "===== Building $service ====="
              cd $service
              
              # Kiểm tra pom.xml tồn tại không
              if [ -f "pom.xml" ]; then
                # Nếu có wrapper Maven, sử dụng wrapper
                if [ -f "mvnw" ]; then
                  chmod +x mvnw
                  ./mvnw clean package -DskipTests
                else
                  # Sử dụng Maven từ runner
                  mvn clean package -DskipTests
                fi
              else
                echo "Không tìm thấy pom.xml trong $service"
                exit 1
              fi
              
              cd ..
              echo "===== Hoàn thành build $service ====="
            fi
          done

      - name: Run tests
        run: |
          services=("eureka-server" "auth-service" "user-service" "product-service" "order-service" "cart-service" "review-service" "email-service" "notification-service" "chatbot-service" "api-gateway")
          
          for service in "${services[@]}"; do
            if [ -d "$service" ]; then
              echo "===== Running tests for $service ====="
              cd $service
              
              if [ -f "pom.xml" ]; then
                # Nếu có wrapper Maven, sử dụng wrapper
                if [ -f "mvnw" ]; then
                  ./mvnw test
                else
                  # Sử dụng Maven từ runner
                  mvn test
                fi
              fi
              
              cd ..
              echo "===== Hoàn thành tests cho $service ====="
            fi
          done
      
      - name: Build Docker images (không push)
        if: github.event_name == 'push'
        run: |
          services=("eureka-server" "auth-service" "user-service" "product-service" "order-service" "cart-service" "review-service" "email-service" "notification-service" "chatbot-service" "api-gateway")
          
          for service in "${services[@]}"; do
            if [ -d "$service" ]; then
              echo "===== Building Docker image cho $service ====="
              docker build -t glasses-server/$service:latest ./$service
              echo "===== Docker image đã được tạo: glasses-server/$service:latest ====="
            fi
          done

  # Job tùy chọn: Push Docker images lên registry
  push-docker-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Mặc định tắt, đổi thành true hoặc github.event_name == 'push' để kích hoạt
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push Docker images
        run: |
          services=("eureka-server" "auth-service" "user-service" "product-service" "order-service" "cart-service" "review-service" "email-service" "notification-service" "chatbot-service" "api-gateway")
          
          for service in "${services[@]}"; do
            if [ -d "$service" ]; then
              echo "===== Building and pushing $service ====="
              docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/$service:latest ./$service
              docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$service:latest
            fi
          done
    
# Thêm job deploy-to-ec2
  deploy-to-ec2:
    needs: push-docker-images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Generate docker-compose.prod.yml
        run: |
          cat > docker-compose.prod.yml << 'EOF'
          version: "3.8"
          services:
            # =================== #
            # 📌 KAFKA SERVICES  #
            # =================== #
            zookeeper:
              image: confluentinc/cp-zookeeper:latest
              container_name: zookeeper
              restart: always
              environment:
                ZOOKEEPER_CLIENT_PORT: 2181

            kafka:
              image: confluentinc/cp-kafka:latest
              container_name: kafka
              restart: always
              depends_on:
                - zookeeper
              ports:
                - "9092:9092"
              environment:
                KAFKA_BROKER_ID: 1
                KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:9093
                KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
                KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
                KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

            redis:
              image: redis:7-alpine
              container_name: redis
              ports:
                - "6379:6379"
              restart: unless-stopped

            # ======================= #
            # 📌 DATABASES           #
            # ======================= #
            mariadb:
              image: mariadb:latest
              container_name: mariadb
              ports:
                - "3306:3306"
              environment:
                MARIADB_ROOT_PASSWORD: root
                MARIADB_CHARACTER_SET_SERVER: utf8mb4
                MARIADB_COLLATION_SERVER: utf8mb4_unicode_ci
              volumes:
                - mariadb_data:/var/lib/mysql
                - ./mariadb-init:/docker-entrypoint-initdb.d

            mongodb:
              image: mongo:latest
              container_name: mongodb
              environment:
                MONGO_INITDB_ROOT_USERNAME: admin
                MONGO_INITDB_ROOT_PASSWORD: password
              ports:
                - "27017:27017"
              volumes:
                - mongodb_data:/data/db
              healthcheck:
                test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
                interval: 10s
                timeout: 5s
                retries: 5

            # ======================= #
            # 📌 MICROSERVICES       #
            # ======================= #
            eureka-server:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/eureka-server:latest
              container_name: eureka-server
              ports:
                - "8761:8761"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
              healthcheck:
                test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
                interval: 15s
                timeout: 10s
                retries: 3
                start_period: 30s

            auth-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/auth-service:latest
              container_name: auth-service
              ports:
                - "8081:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/glasses_db_account
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=root
                - SPRING_DATA_REDIS_HOST=redis
                - SPRING_DATA_REDIS_PORT=6379
                - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
              depends_on:
                eureka-server:
                  condition: service_healthy
                mariadb:
                  condition: service_started
                redis:
                  condition: service_started

            user-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:latest
              container_name: user-service
              ports:
                - "8082:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/glasses_db_user
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=root
                - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
              depends_on:
                eureka-server:
                  condition: service_healthy
                mariadb:
                  condition: service_started

            product-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/product-service:latest
              container_name: product-service
              ports:
                - "8083:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/glasses_db_products
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=root
              depends_on:
                eureka-server:
                  condition: service_healthy
                mariadb:
                  condition: service_started

            order-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/order-service:latest
              container_name: order-service
              ports:
                - "8084:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/glasses_db_orders?createDatabaseIfNotExist=true
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=root
                - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
                - VNPAY_URL=${{ secrets.VNPAY_UR }}
                - VNPAY_TMN_CODE=${{ secrets.VNPAY_TMN_CODE }}
                - VNPAY_HASH_SECRET=${{ secrets.VNPAY_HASH_SECRET }}
                - VNPAY_IP_ADDR=${{ secrets.VNPAY_IP_ADDR }}
                - VNPAY_RETURN_URL=${{ secrets.VNPAY_RETURN_URL }}
              depends_on:
                eureka-server:
                  condition: service_healthy
                mariadb:
                  condition: service_started

            cart-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/cart-service:latest
              container_name: cart-service
              ports:
                - "8088:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_DATA_REDIS_HOST=redis
                - SPRING_DATA_REDIS_PORT=6379
              depends_on:
                eureka-server:
                  condition: service_healthy
                redis:
                  condition: service_started

            review-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/review-service:latest
              container_name: review-service
              ports:
                - "8085:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/glasses_db_reviews
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=root
              depends_on:
                eureka-server:
                  condition: service_healthy
                mariadb:
                  condition: service_started

            email-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/email-service:latest
              container_name: email-service
              ports:
                - "8087:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
                - SPRING_MAIL_HOST=smtp.gmail.com
                - SPRING_MAIL_PORT=587
                - SPRING_MAIL_USERNAME=${{ secrets.EMAIL }}
                - SPRING_MAIL_PASSWORD=${{ secrets.PASSWORD }}
                - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
                - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
              depends_on:
                eureka-server:
                  condition: service_healthy

            notification-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/notification-service:latest
              container_name: notification-service
              ports:
                - "8086:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/glasses_db_notifications
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=root
                - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
              depends_on:
                eureka-server:
                  condition: service_healthy
                mariadb:
                  condition: service_started

            chatbot-service:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/chatbot-service:latest
              container_name: chatbot-service
              ports:
                - "8089:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
                - GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
                - RESILIENCE4J_RATELIMITER_INSTANCES_CHATENDPOINT_LIMITFORPERIOD=15
                - RESILIENCE4J_RATELIMITER_INSTANCES_CHATENDPOINT_LIMITREFRESHPERIOD=60s
                - RESILIENCE4J_RATELIMITER_INSTANCES_CHATENDPOINT_TIMEOUTDURATION=0
                - RESILIENCE4J_RETRY_INSTANCES_GEMINIAPIRETRY_MAXATTEMPTS=3
                - RESILIENCE4J_RETRY_INSTANCES_GEMINIAPIRETRY_WAITDURATION=500ms
                - RESILIENCE4J_RETRY_INSTANCES_GEMINIAPIRETRY_RETRYEXCEPTIONS=java.io.IOException
                - SPRING_DATA_MONGODB_URI=mongodb://admin:password@mongodb:27017/chatbotdb?authSource=admin
              depends_on:
                eureka-server:
                  condition: service_healthy
                mongodb:
                  condition: service_healthy

            api-gateway:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/api-gateway:latest
              container_name: api-gateway
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
              depends_on:
                eureka-server:
                  condition: service_healthy

          volumes:
            mongodb_data:
              driver: local
            mariadb_data:
              driver: local
          EOF

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy files to EC2
        run: |
          # Tạo thư mục trên EC2 nếu chưa tồn tại
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p ~/glasses-app/mariadb-init"
          
          # Sao chép docker-compose.prod.yml
          scp docker-compose.prod.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/glasses-app/
          
          # Sao chép SQL files nếu có
          if [ -d "mariadb-init" ]; then
            scp -r mariadb-init/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/glasses-app/mariadb-init/
          fi

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            cd ~/glasses-app

          # Tạo .env file nếu chưa có
          if [ ! -f ".env" ]; then
            echo "DB_PASSWORD=root" > .env
            echo "MONGO_USER=admin" >> .env
            echo "MONGO_PASSWORD=password" >> .env
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          fi
      
          # Login to Docker Hub
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      
          # Pull latest images
          docker-compose -f docker-compose.prod.yml pull
      
          # Restart các services
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d
      
          # Hiển thị các containers đang chạy
          docker ps
          ENDSSH
